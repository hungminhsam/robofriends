{"version":3,"sources":["redux/reducers.js","redux/action-types.js","serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scrollable.js","components/ErrorBoundary.js","containers/App.js","redux/actions.js","index.js"],"names":["initialState","searchText","robots","isPending","error","data","combineReducers","state","action","type","payload","Boolean","window","location","hostname","match","Card","id","name","email","className","src","alt","CardList","map","key","SearchBox","props","placeholder","onChange","e","target","value","trim","Scrollable","style","overflowY","borderTop","height","children","ErrorBoundary","hasError","info","this","setState","hassError","Component","connect","ownProps","changeSearchText","text","fetchRobots","dispatch","a","fetch","resp","json","useEffect","message","filteredRobots","filter","robot","toLowerCase","includes","renderFilteredRobots","store","createStore","reducers","applyMiddleware","reduxThunk","reduxLogger","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.7a9846b5.chunk.js","sourcesContent":["import { combineReducers } from \"redux\";\n\nimport {\n  CHANGE_SEARCH_TEXT,\n  FETCH_ROBOTS_PENDING,\n  FETCH_ROBOTS_SUCCESS,\n  FETCH_ROBOTS_FAILED,\n} from \"./action-types\";\n\nconst initialState = {\n  searchText: \"\",\n  robots: {\n    isPending: false,\n    error: null,\n    data: [],\n  },\n};\n\nconst searchTextReducer = (state = initialState.searchText, action) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_TEXT:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nconst robotsReducer = (state = initialState.robots, action) => {\n  switch (action.type) {\n    case FETCH_ROBOTS_PENDING:\n      return { ...state, isPending: true };\n    case FETCH_ROBOTS_SUCCESS:\n      return { ...state, isPending: false, data: action.payload };\n    case FETCH_ROBOTS_FAILED:\n      return { ...state, isPending: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  searchText: searchTextReducer,\n  robots: robotsReducer,\n});\n","export const CHANGE_SEARCH_TEXT = \"CHANGE_SEARCH_TEXT\";\nexport const FETCH_ROBOTS_PENDING = \"FETCH_ROBOTS_PENDING\";\nexport const FETCH_ROBOTS_SUCCESS = \"FETCH_ROBOTS_SUCCESS\";\nexport const FETCH_ROBOTS_FAILED = \"FETCH_ROBOTS_FAILED\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 ma2 pa3 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?200x200`} alt={name} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ data }) => {\n  return data.map(({ id, name, email }) => (\n    <Card key={id} id={id} name={name} email={email} />\n  ));\n};\n\nexport default CardList;\n","import React from \"react\";\n// import { connect } from \"react-redux\";\n// import { setSearchField } from \"../redux/actions\";\n\nconst SearchBox = (props) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b-green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"Search Robots\"\n        onChange={(e) => props.onChange(e.target.value.trim())}\n      />\n    </div>\n  );\n};\n\n// export default connect(null, { setSearchField })(SearchBox);\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scrollable = (props) => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        borderTop: \"1px solid grey\",\n        height: \"800px\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scrollable;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hassError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooooops! That is not good.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { changeSearchText, fetchRobots } from \"../redux/actions\";\n\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scrollable from \"../components/Scrollable\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport \"./App.css\";\n\nconst App = ({ searchText, changeSearchText, robots, fetchRobots }) => {\n  //fetch the robots when the component is mounted\n  useEffect(() => {\n    fetchRobots();\n  }, [fetchRobots]);\n\n  const renderFilteredRobots = () => {\n    if (robots.isPending) {\n      return <h2>Loading...</h2>;\n    }\n\n    if (robots.error) {\n      return <h2>{robots.error.message}</h2>;\n    }\n\n    const filteredRobots = robots.data.filter((robot) =>\n      robot.name.toLowerCase().includes(searchText.toLowerCase())\n    );\n    return (\n      <ErrorBoundary>\n        <CardList data={filteredRobots} />\n      </ErrorBoundary>\n    );\n  };\n\n  return (\n    <div className=\"tc\">\n      <h1 className=\"page-title f1\">RoboFriends</h1>\n      <SearchBox onChange={(text) => changeSearchText(text)} />\n      <Scrollable>{renderFilteredRobots()}</Scrollable>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    searchText: state.searchText,\n    robots: state.robots,\n  };\n};\n\nexport default connect(mapStateToProps, { changeSearchText, fetchRobots })(App);\n","import {\n  CHANGE_SEARCH_TEXT,\n  FETCH_ROBOTS_PENDING,\n  FETCH_ROBOTS_SUCCESS,\n  FETCH_ROBOTS_FAILED,\n} from \"./action-types\";\n\nexport const changeSearchText = (text) => ({\n  type: CHANGE_SEARCH_TEXT,\n  payload: text,\n});\n\nexport const fetchRobots = () => async (dispatch) => {\n  dispatch({ type: FETCH_ROBOTS_PENDING });\n  try {\n    const resp = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n    const data = await resp.json();\n    dispatch({ type: FETCH_ROBOTS_SUCCESS, payload: data });\n  } catch (error) {\n    dispatch({ type: FETCH_ROBOTS_FAILED, payload: error });\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport reduxThunk from \"redux-thunk\";\nimport reduxLogger from \"redux-logger\";\nimport reducers from \"./redux/reducers\";\n\nimport \"./index.css\";\nimport \"tachyons\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./containers/App\";\n\nconst store = createStore(reducers, applyMiddleware(reduxThunk, reduxLogger));\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}