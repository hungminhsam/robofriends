{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scrollable.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","src","alt","CardList","data","map","key","SearchBox","props","type","placeholder","onChange","e","onSearchBoxChange","target","value","trim","Scrollable","style","overflowY","borderTop","height","children","ErrorBoundary","state","hasError","error","info","this","setState","hassError","Component","App","useState","robots","setRobots","searchText","setSearchText","useEffect","a","fetch","resp","json","fetchRobots","newValue","filteredRobots","filter","robot","toLowerCase","includes","renderFilteredRobots","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"gPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kCCJSC,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACxB,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAKJ,IACrD,6BACE,4BAAKA,GACL,2BAAIC,MCCGI,EANE,SAAC,GAChB,OAD6B,EAAXC,KACNC,KAAI,gBAAGR,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAMC,EAAb,EAAaA,MAAb,OACd,kBAAC,EAAD,CAAMO,IAAKT,EAAIA,GAAIA,EAAIC,KAAMA,EAAMC,MAAOA,QCU/BQ,EAbG,SAACC,GACjB,OACE,yBAAKR,UAAU,OACb,2BACEA,UAAU,kCACVS,KAAK,SACLC,YAAY,gBACZC,SAAU,SAACC,GAAD,OAAOJ,EAAMK,kBAAkBD,EAAEE,OAAOC,MAAMC,aCOjDC,EAdI,SAACT,GAClB,OACE,yBACEU,MAAO,CACLC,UAAW,SACXC,UAAW,iBACXC,OAAQ,UAGTb,EAAMc,W,4BCYEC,E,kDApBb,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IACDgB,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GACvBC,KAAKC,SAAS,CAAEC,WAAW,M,+BAI3B,OAAIF,KAAKJ,MAAMC,SACN,2DAGFG,KAAKpB,MAAMc,a,GAjBMS,aC2CbC,G,MAtCH,SAACxB,GAAW,IAAD,EACOyB,mBAAS,IADhB,mBACdC,EADc,KACNC,EADM,OAEeF,mBAAS,IAFxB,mBAEdG,EAFc,KAEFC,EAFE,KAKrBC,qBAAU,YACS,uCAAG,8BAAAC,EAAA,sEACCC,MAAM,8CADP,cACZC,EADY,gBAECA,EAAKC,OAFN,OAEZtC,EAFY,OAGlB+B,EAAU/B,GAHQ,2CAAH,qDAKjBuC,KACC,IAiBH,OACE,yBAAK3C,UAAU,MACb,wBAAIA,UAAU,iBAAd,eACA,kBAAC,EAAD,CAAWa,kBAPW,SAAC+B,GACzBP,EAAcO,MAOZ,kBAAC,EAAD,KAnByB,WAC3B,IAAMC,EAAiBX,EAAOY,QAAO,SAACC,GAAD,OACnCA,EAAMjD,KAAKkD,cAAcC,SAASb,EAAWY,kBAE/C,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU5C,KAAMyC,KAaLK,OChCnBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SPuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,c","file":"static/js/main.5998eae5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 ma2 pa3 grow bw2 shadow-5\">\n      <img src={`https://robohash.org/${id}?200x200`} alt={name} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ data }) => {\n  return data.map(({ id, name, email }) => (\n    <Card key={id} id={id} name={name} email={email} />\n  ));\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst SearchBox = (props) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b-green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"Search Robots\"\n        onChange={(e) => props.onSearchBoxChange(e.target.value.trim())}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scrollable = (props) => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        borderTop: \"1px solid grey\",\n        height: \"800px\",\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scrollable;\n","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hassError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooooops! That is not good.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { useState, useEffect } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scrollable from \"../components/Scrollable\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport \"./App.css\";\n\nconst App = (props) => {\n  const [robots, setRobots] = useState([]);\n  const [searchText, setSearchText] = useState(\"\");\n\n  //fetch the robots\n  useEffect(() => {\n    const fetchRobots = async () => {\n      const resp = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n      const data = await resp.json();\n      setRobots(data);\n    };\n    fetchRobots();\n  }, []);\n\n  const renderFilteredRobots = () => {\n    const filteredRobots = robots.filter((robot) =>\n      robot.name.toLowerCase().includes(searchText.toLowerCase())\n    );\n    return (\n      <ErrorBoundary>\n        <CardList data={filteredRobots} />\n      </ErrorBoundary>\n    );\n  };\n\n  const onSearchBoxChange = (newValue) => {\n    setSearchText(newValue);\n  };\n\n  return (\n    <div className=\"tc\">\n      <h1 className=\"page-title f1\">RoboFriends</h1>\n      <SearchBox onSearchBoxChange={onSearchBoxChange} />\n      <Scrollable>{renderFilteredRobots()}</Scrollable>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"tachyons\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport App from \"./containers/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}